
@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<IPublishedContent>
@inject Umbraco.Cms.Web.Common.UmbracoHelper UmbracoHelper

@{
    var settingsPage = Umbraco.Content(Guid.Parse("8ac6d860-0a81-48ab-85ac-1a646bf08425"));

    
    var supportText = settingsPage?.Value<string>("supportText") ?? "Default support text";
    var onlineSupportText = settingsPage?.Value<string>("onlineSupportText") ?? "Default online support text";
    var supportEmail = settingsPage?.Value<string>("supportEmail") ?? "example@example.com";

        bool.TryParse(TempData["error_email"]?.ToString()!, out bool error_email);


}

<div class="support-box">
    <p class="headline">@supportText</p>
    <p>@onlineSupportText</p>

    @if (TempData["success"] != null && !string.IsNullOrEmpty(TempData["success"].ToString()))
    {
        <div class="success-message">@TempData["success"]</div>
    }
    else
    {
        @using (Html.BeginUmbracoForm("HandleSubmit", "SupportSurface", FormMethod.Post))
        {
            <div class="form-input-group">
                <div class="input-wrapper">
                    <input id="email" name="email" type="text" placeholder="Email address" class="form-input" value="@TempData["email"]" />
                    <button type="submit" id="send-email" class="send-email-btn">
                        <i class="fa-regular fa-envelope"></i>
                    </button>
                </div>

                @if (error_email)
                {
                    <span class="form-input-error form-invalid-input">You must enter a valid email address</span>
                }
            </div>
        }
    }
</div>

